import requests
import pandas as pd
import time


def get_historical_prices(symbol, interval, limit):
    base_url = "https://fapi.binance.com"
    klines_endpoint = f"{base_url}/fapi/v1/klines"
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": limit
    }
    response = requests.get(klines_endpoint, params=params)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame(data, columns=['Open Time', 'Open', 'High', 'Low', 'Close', 'Volume', 'Close Time',
                                         'Quote Asset Volume',
                                         'Number of Trades', 'Taker Buy Base Asset Volume',
                                         'Taker Buy Quote Asset Volume',
                                         'Ignore'])
        df['Open Time'] = pd.to_datetime(df['Open Time'], unit='ms')
        df['Close Time'] = pd.to_datetime(df['Close Time'], unit='ms')
        df.set_index('Open Time', inplace=True)
        df[['Open', 'High', 'Low', 'Close', 'Volume']] = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)
        return df
    else:
        print(f"Error in API call to get historical prices for symbol: {symbol}. Status Code: {response.status_code}")
        return None


def scan_price_change(df, num_coins, price_change_threshold):
    if 'Close' not in df.columns:
        print("Error: 'Close' column not found in DataFrame.")
        return pd.DataFrame()  # Return an empty DataFrame

    df['Price Change 1h'] = df['Close'].pct_change(periods=60) * 100

    filtered_df = df[
        (df['Price Change 1h'] < price_change_threshold)
    ]

    sorted_df = filtered_df.sort_values(by='Price Change 1h', ascending=True).head(num_coins)
    return sorted_df[['Close', 'Price Change 1h']]


def scan_bollinger_width(df, bbw_threshold, price_diff_threshold):
    if 'Close' not in df.columns:
        print("Error: 'Close' column not found in DataFrame.")
        return pd.DataFrame()  # Return an empty DataFrame

    df['SMA 480'] = df['Close'].rolling(window=480).mean()
    df['Upper Band'] = df['SMA 480'] + (df['Close'].rolling(window=480).std(ddof=0) * 2)
    df['Lower Band'] = df['SMA 480'] - (df['Close'].rolling(window=480).std(ddof=0) * 2)
    df['Bollinger Width'] = (df['Upper Band'] - df['Lower Band']) / df['SMA 480']
    df['Price Difference'] = (df['Upper Band'] - df['Lower Band']) / df['Close']

    filtered_df = df[
        (df['Bollinger Width'] < bbw_threshold) &
        (df['Price Difference'] < price_diff_threshold)
        ]

    return filtered_df[['Close', 'Bollinger Width', 'Price Difference']]


def scan_price_change_5min(df, price_change_threshold_5min):
    if 'Close' not in df.columns:
        print("Error: 'Close' column not found in DataFrame.")
        return pd.DataFrame()  # Return an empty DataFrame

    df['Price Change 5min'] = df['Close'].pct_change(periods=5) * 100

    filtered_df = df[
        (df['Price Change 5min'] > price_change_threshold_5min)
    ]

    return filtered_df[['Close', 'Price Change 5min']]


def get_all_coins():
    url = "https://fapi.binance.com/fapi/v1/ticker/price"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        coins = [item["symbol"] for item in data if item["symbol"].endswith("USDT")]
        return coins
    else:
        print(f"Error in API call to get all coins. Status Code: {response.status_code}")
        return []


def get_current_prices(symbols):
    url = f"https://fapi.binance.com/fapi/v1/ticker/price"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        prices = {item["symbol"]: float(item["price"]) for item in data if item["symbol"] in symbols}
        return prices
    else:
        print(f"Error in API call to get current prices. Status Code: {response.status_code}")
        return {}


def generate_tradingview_link(coin_name):
    return f"https://tv.coinglass.com/Binance_{coin_name}USDT"


def main(interval, limit, num_coins, price_change_threshold, bbw_threshold, price_diff_threshold,
         price_change_threshold_5min, update_interval):
    all_coins = get_all_coins()

    while True:
        table_data = []

        for symbol in all_coins:
            df = get_historical_prices(symbol, interval, limit)
            if df is None or df.empty:
                continue
            price_change_results = scan_price_change(df, num_coins, price_change_threshold)
            if not price_change_results.empty:
                bollinger_width_results = scan_bollinger_width(df, bbw_threshold, price_diff_threshold)
                common_results = pd.merge(price_change_results, bollinger_width_results, on='Close')
                if not common_results.empty:
                    price_change_5min_results = scan_price_change_5min(df, price_change_threshold_5min)
                    final_results = pd.merge(common_results, price_change_5min_results, on='Close')
                    if not final_results.empty:
                        current_prices = get_current_prices([symbol])
                        for index, row in final_results.iterrows():
                            coin_name = symbol.replace("USDT", "")
                            close_price = current_prices.get(symbol, 0.0)  # Handle missing data gracefully
                            price_change_1h = row.get('Price Change 1h', 0.0)  # Handle missing data gracefully
                            sma_480 = row.get('SMA 480', 0.0)  # Handle missing data gracefully
                            bollinger_width = row.get('Bollinger Width', 0.0)  # Handle missing data gracefully
                            price_difference = row.get('Price Difference', 0.0)  # Handle missing data gracefully
                            price_change_5min = row.get('Price Change 5min', 0.0)  # Handle missing data gracefully
                            tradingview_link = generate_tradingview_link(coin_name)
                            table_data.append(
                                [coin_name, close_price, price_change_1h, sma_480, bollinger_width, price_difference,
                                 price_change_5min, tradingview_link])

        df = pd.DataFrame(table_data,
                          columns=['Coin Name', 'Close Price', 'Price Change 1h', 'SMA 480', 'Bollinger Width',
                                   'Price Difference', 'Price Change 5min', 'TradingView Link'])
        sorted_df = df.sort_values(by='Price Change 1h', ascending=True)

        current_time = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"Time: {current_time} | Interval: {interval}")
        print(sorted_df.head(num_coins))
        print("--------------------------------")

        time.sleep(update_interval)


interval = '1m'
limit = 480
num_coins = 20
price_change_threshold = 1.0  # %1'den düşük değişim
bbw_threshold = 0.1  # Bollinger band genişliği
price_diff_threshold = 1.0  # Fiyat farkı %1'den düşük
price_change_threshold_5min = 3.0  # %3'ten büyük fiyat değişimi (son 5 dk)
update_interval = 60

main(interval, limit, num_coins, price_change_threshold, bbw_threshold, price_diff_threshold,
     price_change_threshold_5min, update_interval)
